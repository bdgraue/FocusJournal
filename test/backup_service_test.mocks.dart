// Mocks generated by Mockito 5.4.6 from annotations
// in focus_journal/test/backup_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;

import 'package:device_info_plus/device_info_plus.dart' as _i12;
import 'package:device_info_plus/src/model/android_device_info.dart' as _i3;
import 'package:device_info_plus/src/model/ios_device_info.dart' as _i4;
import 'package:device_info_plus/src/model/linux_device_info.dart' as _i5;
import 'package:device_info_plus/src/model/macos_device_info.dart' as _i7;
import 'package:device_info_plus/src/model/web_browser_info.dart' as _i6;
import 'package:device_info_plus/src/model/windows_device_info.dart' as _i8;
import 'package:device_info_plus_platform_interface/device_info_plus_platform_interface.dart'
    as _i9;
import 'package:flutter/foundation.dart' as _i10;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeIOSOptions_0 extends _i1.SmartFake implements _i2.IOSOptions {
  _FakeIOSOptions_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAndroidOptions_1 extends _i1.SmartFake
    implements _i2.AndroidOptions {
  _FakeAndroidOptions_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLinuxOptions_2 extends _i1.SmartFake implements _i2.LinuxOptions {
  _FakeLinuxOptions_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWindowsOptions_3 extends _i1.SmartFake
    implements _i2.WindowsOptions {
  _FakeWindowsOptions_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWebOptions_4 extends _i1.SmartFake implements _i2.WebOptions {
  _FakeWebOptions_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMacOsOptions_5 extends _i1.SmartFake implements _i2.MacOsOptions {
  _FakeMacOsOptions_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAndroidDeviceInfo_6 extends _i1.SmartFake
    implements _i3.AndroidDeviceInfo {
  _FakeAndroidDeviceInfo_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIosDeviceInfo_7 extends _i1.SmartFake implements _i4.IosDeviceInfo {
  _FakeIosDeviceInfo_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLinuxDeviceInfo_8 extends _i1.SmartFake
    implements _i5.LinuxDeviceInfo {
  _FakeLinuxDeviceInfo_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWebBrowserInfo_9 extends _i1.SmartFake
    implements _i6.WebBrowserInfo {
  _FakeWebBrowserInfo_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMacOsDeviceInfo_10 extends _i1.SmartFake
    implements _i7.MacOsDeviceInfo {
  _FakeMacOsDeviceInfo_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWindowsDeviceInfo_11 extends _i1.SmartFake
    implements _i8.WindowsDeviceInfo {
  _FakeWindowsDeviceInfo_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBaseDeviceInfo_12 extends _i1.SmartFake
    implements _i9.BaseDeviceInfo {
  _FakeBaseDeviceInfo_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FlutterSecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSecureStorage extends _i1.Mock
    implements _i2.FlutterSecureStorage {
  MockFlutterSecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IOSOptions get iOptions =>
      (super.noSuchMethod(
            Invocation.getter(#iOptions),
            returnValue: _FakeIOSOptions_0(this, Invocation.getter(#iOptions)),
          )
          as _i2.IOSOptions);

  @override
  _i2.AndroidOptions get aOptions =>
      (super.noSuchMethod(
            Invocation.getter(#aOptions),
            returnValue: _FakeAndroidOptions_1(
              this,
              Invocation.getter(#aOptions),
            ),
          )
          as _i2.AndroidOptions);

  @override
  _i2.LinuxOptions get lOptions =>
      (super.noSuchMethod(
            Invocation.getter(#lOptions),
            returnValue: _FakeLinuxOptions_2(
              this,
              Invocation.getter(#lOptions),
            ),
          )
          as _i2.LinuxOptions);

  @override
  _i2.WindowsOptions get wOptions =>
      (super.noSuchMethod(
            Invocation.getter(#wOptions),
            returnValue: _FakeWindowsOptions_3(
              this,
              Invocation.getter(#wOptions),
            ),
          )
          as _i2.WindowsOptions);

  @override
  _i2.WebOptions get webOptions =>
      (super.noSuchMethod(
            Invocation.getter(#webOptions),
            returnValue: _FakeWebOptions_4(
              this,
              Invocation.getter(#webOptions),
            ),
          )
          as _i2.WebOptions);

  @override
  _i2.MacOsOptions get mOptions =>
      (super.noSuchMethod(
            Invocation.getter(#mOptions),
            returnValue: _FakeMacOsOptions_5(
              this,
              Invocation.getter(#mOptions),
            ),
          )
          as _i2.MacOsOptions);

  @override
  void registerListener({
    required String? key,
    required _i10.ValueChanged<String?>? listener,
  }) => super.noSuchMethod(
    Invocation.method(#registerListener, [], {#key: key, #listener: listener}),
    returnValueForMissingStub: null,
  );

  @override
  void unregisterListener({
    required String? key,
    required _i10.ValueChanged<String?>? listener,
  }) => super.noSuchMethod(
    Invocation.method(#unregisterListener, [], {
      #key: key,
      #listener: listener,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void unregisterAllListenersForKey({required String? key}) =>
      super.noSuchMethod(
        Invocation.method(#unregisterAllListenersForKey, [], {#key: key}),
        returnValueForMissingStub: null,
      );

  @override
  void unregisterAllListeners() => super.noSuchMethod(
    Invocation.method(#unregisterAllListeners, []),
    returnValueForMissingStub: null,
  );

  @override
  _i11.Future<void> write({
    required String? key,
    required String? value,
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#write, [], {
              #key: key,
              #value: value,
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i11.Future<void>.value(),
            returnValueForMissingStub: _i11.Future<void>.value(),
          )
          as _i11.Future<void>);

  @override
  _i11.Future<String?> read({
    required String? key,
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#read, [], {
              #key: key,
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i11.Future<String?>.value(),
          )
          as _i11.Future<String?>);

  @override
  _i11.Future<bool> containsKey({
    required String? key,
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [], {
              #key: key,
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i11.Future<bool>.value(false),
          )
          as _i11.Future<bool>);

  @override
  _i11.Future<void> delete({
    required String? key,
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [], {
              #key: key,
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i11.Future<void>.value(),
            returnValueForMissingStub: _i11.Future<void>.value(),
          )
          as _i11.Future<void>);

  @override
  _i11.Future<Map<String, String>> readAll({
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAll, [], {
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i11.Future<Map<String, String>>.value(
              <String, String>{},
            ),
          )
          as _i11.Future<Map<String, String>>);

  @override
  _i11.Future<void> deleteAll({
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAll, [], {
              #iOptions: iOptions,
              #aOptions: aOptions,
              #lOptions: lOptions,
              #webOptions: webOptions,
              #mOptions: mOptions,
              #wOptions: wOptions,
            }),
            returnValue: _i11.Future<void>.value(),
            returnValueForMissingStub: _i11.Future<void>.value(),
          )
          as _i11.Future<void>);

  @override
  _i11.Future<bool?> isCupertinoProtectedDataAvailable() =>
      (super.noSuchMethod(
            Invocation.method(#isCupertinoProtectedDataAvailable, []),
            returnValue: _i11.Future<bool?>.value(),
          )
          as _i11.Future<bool?>);
}

/// A class which mocks [DeviceInfoPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceInfoPlugin extends _i1.Mock implements _i12.DeviceInfoPlugin {
  MockDeviceInfoPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i3.AndroidDeviceInfo> get androidInfo =>
      (super.noSuchMethod(
            Invocation.getter(#androidInfo),
            returnValue: _i11.Future<_i3.AndroidDeviceInfo>.value(
              _FakeAndroidDeviceInfo_6(this, Invocation.getter(#androidInfo)),
            ),
          )
          as _i11.Future<_i3.AndroidDeviceInfo>);

  @override
  _i11.Future<_i4.IosDeviceInfo> get iosInfo =>
      (super.noSuchMethod(
            Invocation.getter(#iosInfo),
            returnValue: _i11.Future<_i4.IosDeviceInfo>.value(
              _FakeIosDeviceInfo_7(this, Invocation.getter(#iosInfo)),
            ),
          )
          as _i11.Future<_i4.IosDeviceInfo>);

  @override
  _i11.Future<_i5.LinuxDeviceInfo> get linuxInfo =>
      (super.noSuchMethod(
            Invocation.getter(#linuxInfo),
            returnValue: _i11.Future<_i5.LinuxDeviceInfo>.value(
              _FakeLinuxDeviceInfo_8(this, Invocation.getter(#linuxInfo)),
            ),
          )
          as _i11.Future<_i5.LinuxDeviceInfo>);

  @override
  _i11.Future<_i6.WebBrowserInfo> get webBrowserInfo =>
      (super.noSuchMethod(
            Invocation.getter(#webBrowserInfo),
            returnValue: _i11.Future<_i6.WebBrowserInfo>.value(
              _FakeWebBrowserInfo_9(this, Invocation.getter(#webBrowserInfo)),
            ),
          )
          as _i11.Future<_i6.WebBrowserInfo>);

  @override
  _i11.Future<_i7.MacOsDeviceInfo> get macOsInfo =>
      (super.noSuchMethod(
            Invocation.getter(#macOsInfo),
            returnValue: _i11.Future<_i7.MacOsDeviceInfo>.value(
              _FakeMacOsDeviceInfo_10(this, Invocation.getter(#macOsInfo)),
            ),
          )
          as _i11.Future<_i7.MacOsDeviceInfo>);

  @override
  _i11.Future<_i8.WindowsDeviceInfo> get windowsInfo =>
      (super.noSuchMethod(
            Invocation.getter(#windowsInfo),
            returnValue: _i11.Future<_i8.WindowsDeviceInfo>.value(
              _FakeWindowsDeviceInfo_11(this, Invocation.getter(#windowsInfo)),
            ),
          )
          as _i11.Future<_i8.WindowsDeviceInfo>);

  @override
  _i11.Future<_i9.BaseDeviceInfo> get deviceInfo =>
      (super.noSuchMethod(
            Invocation.getter(#deviceInfo),
            returnValue: _i11.Future<_i9.BaseDeviceInfo>.value(
              _FakeBaseDeviceInfo_12(this, Invocation.getter(#deviceInfo)),
            ),
          )
          as _i11.Future<_i9.BaseDeviceInfo>);
}
